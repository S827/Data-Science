{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-16T11:46:08.129910Z","iopub.execute_input":"2024-06-16T11:46:08.130363Z","iopub.status.idle":"2024-06-16T11:46:08.986761Z","shell.execute_reply.started":"2024-06-16T11:46:08.130326Z","shell.execute_reply":"2024-06-16T11:46:08.985954Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# 1. Convert integer time of format HHMM to string time of format HH:MM","metadata":{}},{"cell_type":"markdown","source":"1. convert integer time to string and pad with leading zeroes if needed","metadata":{}},{"cell_type":"code","source":"time = 110220\nstr_time = str(time).zfill(6)\nprint(type(str_time), str_time)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-16T11:46:08.988201Z","iopub.execute_input":"2024-06-16T11:46:08.988600Z","iopub.status.idle":"2024-06-16T11:46:08.994049Z","shell.execute_reply.started":"2024-06-16T11:46:08.988574Z","shell.execute_reply":"2024-06-16T11:46:08.992988Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"<class 'str'> 110220\n","output_type":"stream"}]},{"cell_type":"markdown","source":"2. Extract hours, minutes and seconds","metadata":{}},{"cell_type":"code","source":"hours = str_time[:2]\nminutes = str_time[2:4]\nseconds = str_time[4:6]\nprint(hours, minutes, seconds, sep=':')","metadata":{"execution":{"iopub.status.busy":"2024-06-16T11:46:08.995210Z","iopub.execute_input":"2024-06-16T11:46:08.995503Z","iopub.status.idle":"2024-06-16T11:46:09.003583Z","shell.execute_reply.started":"2024-06-16T11:46:08.995480Z","shell.execute_reply":"2024-06-16T11:46:09.002635Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"11:02:20\n","output_type":"stream"}]},{"cell_type":"markdown","source":"3. create a formatted time string","metadata":{}},{"cell_type":"code","source":"formatted_time_str = '{:02}:{:02}:{:02}'.format(hours, minutes, seconds)\nformatted_time_str","metadata":{"execution":{"iopub.status.busy":"2024-06-16T11:46:09.005190Z","iopub.execute_input":"2024-06-16T11:46:09.005516Z","iopub.status.idle":"2024-06-16T11:46:09.014812Z","shell.execute_reply.started":"2024-06-16T11:46:09.005484Z","shell.execute_reply":"2024-06-16T11:46:09.013838Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"'11:02:20'"},"metadata":{}}]},{"cell_type":"code","source":"formatted_time_str > '11:02:19'","metadata":{"execution":{"iopub.status.busy":"2024-06-16T11:46:09.017742Z","iopub.execute_input":"2024-06-16T11:46:09.018021Z","iopub.status.idle":"2024-06-16T11:46:09.023913Z","shell.execute_reply.started":"2024-06-16T11:46:09.017997Z","shell.execute_reply":"2024-06-16T11:46:09.022937Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 1. Take input of date from user in mm dd yyyy format and output the Day name ","metadata":{}},{"cell_type":"code","source":"# import calendar module\nimport calendar\n\n# find_Day function\ndef find_day(date):\n#     convert the date into integer values and store into variables using map\n    month, day, year = map(int, date.split())\n#     get the day from the integer values of date using calendar.weekday function\n    day_int = calendar.weekday(year, month, day)\n#     convert the day integer into name of the day using calendar.day_name function\n    day_name = calendar.day_name[day_int]\n    return day_name\n# main func\nif __name__ == \"__main__\":\n    # get the date as input\n    date = input()\n#     call find_day function\n    weekday = find_day(date)\n# print day\n    print(weekday.upper())","metadata":{"execution":{"iopub.status.busy":"2024-06-16T11:58:28.031331Z","iopub.execute_input":"2024-06-16T11:58:28.031693Z","iopub.status.idle":"2024-06-16T11:58:34.814638Z","shell.execute_reply.started":"2024-06-16T11:58:28.031664Z","shell.execute_reply":"2024-06-16T11:58:34.813649Z"},"trusted":true},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdin","text":" 02 18 1989\n"},{"name":"stdout","text":"SATURDAY\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}