{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-18T01:55:13.791122Z","iopub.execute_input":"2024-06-18T01:55:13.791909Z","iopub.status.idle":"2024-06-18T01:55:14.857479Z","shell.execute_reply.started":"2024-06-18T01:55:13.791869Z","shell.execute_reply":"2024-06-18T01:55:14.856372Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# 1. Convert integer time of format HHMM to string time of format HH:MM","metadata":{}},{"cell_type":"markdown","source":"1. convert integer time to string and pad with leading zeroes if needed","metadata":{}},{"cell_type":"code","source":"time = 110220\nstr_time = str(time).zfill(6)\nprint(type(str_time), str_time)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-17T02:42:16.124706Z","iopub.execute_input":"2024-06-17T02:42:16.125328Z","iopub.status.idle":"2024-06-17T02:42:16.130679Z","shell.execute_reply.started":"2024-06-17T02:42:16.125290Z","shell.execute_reply":"2024-06-17T02:42:16.129666Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"<class 'str'> 110220\n","output_type":"stream"}]},{"cell_type":"markdown","source":"2. Extract hours, minutes and seconds","metadata":{}},{"cell_type":"code","source":"hours = str_time[:2]\nminutes = str_time[2:4]\nseconds = str_time[4:6]\nprint(hours, minutes, seconds, sep=':')","metadata":{"execution":{"iopub.status.busy":"2024-06-17T02:42:16.131961Z","iopub.execute_input":"2024-06-17T02:42:16.132244Z","iopub.status.idle":"2024-06-17T02:42:16.142070Z","shell.execute_reply.started":"2024-06-17T02:42:16.132221Z","shell.execute_reply":"2024-06-17T02:42:16.141128Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"11:02:20\n","output_type":"stream"}]},{"cell_type":"markdown","source":"3. create a formatted time string","metadata":{}},{"cell_type":"code","source":"formatted_time_str = '{:02}:{:02}:{:02}'.format(hours, minutes, seconds)\nformatted_time_str","metadata":{"execution":{"iopub.status.busy":"2024-06-17T02:42:16.143962Z","iopub.execute_input":"2024-06-17T02:42:16.144281Z","iopub.status.idle":"2024-06-17T02:42:16.153387Z","shell.execute_reply.started":"2024-06-17T02:42:16.144257Z","shell.execute_reply":"2024-06-17T02:42:16.152427Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"'11:02:20'"},"metadata":{}}]},{"cell_type":"code","source":"formatted_time_str > '11:02:19'","metadata":{"execution":{"iopub.status.busy":"2024-06-17T02:42:16.154516Z","iopub.execute_input":"2024-06-17T02:42:16.154770Z","iopub.status.idle":"2024-06-17T02:42:16.163211Z","shell.execute_reply.started":"2024-06-17T02:42:16.154749Z","shell.execute_reply":"2024-06-17T02:42:16.162169Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 1. Take input of date from user in mm dd yyyy format and output the Day name ","metadata":{}},{"cell_type":"code","source":"# import calendar module\nimport calendar\n\n# find_Day function\ndef find_day(date):\n#     convert the date into integer values and store into variables using map\n    month, day, year = map(int, date.split())\n#     print(month, day, year)\n#     get the day from the integer values of date using calendar.weekday function\n    day_int = calendar.weekday(year, month, day)\n    print(day_int)\n#     convert the day integer into name of the day using calendar.day_name function\n    day_name = calendar.day_name[day_int]\n    return day_name.upper()\n# main func\nif __name__ == \"__main__\":\n    # get the date as input\n    date = input()\n#     call find_day function\n    weekday = find_day(date)\n# print day\n    print(weekday)","metadata":{"execution":{"iopub.status.busy":"2024-06-17T02:42:16.164360Z","iopub.execute_input":"2024-06-17T02:42:16.164651Z","iopub.status.idle":"2024-06-17T02:42:27.141082Z","shell.execute_reply.started":"2024-06-17T02:42:16.164626Z","shell.execute_reply":"2024-06-17T02:42:27.140135Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdin","text":" 08 05 2015\n"},{"name":"stdout","text":"2\nWEDNESDAY\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# 2. Find runner up, i.e 2nd to the highest","metadata":{}},{"cell_type":"markdown","source":"# 3. There are  students in this class whose names and grades are assembled to build the following list:\n\npython students = [['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41], ['Harsh', 39]]\n\nThe lowest grade of  belongs to Tina. The second lowest grade of  belongs to both Harry and Berry, so we order their names alphabetically and print each name on a new line.","metadata":{}},{"cell_type":"code","source":"# extract the grades\n\n# find unique grades and sort them\n\n# get the second lowest grade\n\n# get the name of student who got second lowest grade\n\n# sort the student names alphabetically","metadata":{"execution":{"iopub.status.busy":"2024-06-18T03:39:12.122055Z","iopub.execute_input":"2024-06-18T03:39:12.122583Z","iopub.status.idle":"2024-06-18T03:39:12.160748Z","shell.execute_reply.started":"2024-06-18T03:39:12.122542Z","shell.execute_reply":"2024-06-18T03:39:12.159257Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}