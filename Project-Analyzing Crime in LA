{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8516561,"sourceType":"datasetVersion","datasetId":5084687}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-29T01:13:14.468776Z","iopub.execute_input":"2024-05-29T01:13:14.469210Z","iopub.status.idle":"2024-05-29T01:13:15.724084Z","shell.execute_reply.started":"2024-05-29T01:13:14.469171Z","shell.execute_reply":"2024-05-29T01:13:15.722942Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/crimes/crimes.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Analyzing Crime in LA","metadata":{}},{"cell_type":"code","source":"crimes = pd.read_csv('/kaggle/input/crimes/crimes.csv', parse_dates= ['Date Rptd', 'DATE OCC'], dtype={'TIME OCC': str})\ncrimes.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T01:14:47.980279Z","iopub.execute_input":"2024-05-29T01:14:47.980817Z","iopub.status.idle":"2024-05-29T01:14:50.078313Z","shell.execute_reply.started":"2024-05-29T01:14:47.980784Z","shell.execute_reply":"2024-05-29T01:14:50.077229Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"       DR_NO  Date Rptd   DATE OCC TIME OCC    AREA NAME        Crm Cd Desc  \\\n0  220314085 2022-07-22 2020-05-12     1110    Southwest  THEFT OF IDENTITY   \n1  222013040 2022-08-06 2020-06-04     1620      Olympic  THEFT OF IDENTITY   \n2  220614831 2022-08-18 2020-08-17     1200    Hollywood  THEFT OF IDENTITY   \n3  231207725 2023-02-27 2020-01-27     0635  77th Street  THEFT OF IDENTITY   \n4  220213256 2022-07-14 2020-07-14     0900      Rampart  THEFT OF IDENTITY   \n\n   Vict Age Vict Sex Vict Descent Weapon Desc  Status Desc  \\\n0        27        F            B         NaN  Invest Cont   \n1        60        M            H         NaN  Invest Cont   \n2        28        M            H         NaN  Invest Cont   \n3        37        M            H         NaN  Invest Cont   \n4        79        M            B         NaN  Invest Cont   \n\n                                  LOCATION  \n0  2500 S  SYCAMORE                     AV  \n1  3300    SAN MARINO                   ST  \n2                        1900    TRANSIENT  \n3  6200    4TH                          AV  \n4  1200 W  7TH                          ST  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>DR_NO</th>\n      <th>Date Rptd</th>\n      <th>DATE OCC</th>\n      <th>TIME OCC</th>\n      <th>AREA NAME</th>\n      <th>Crm Cd Desc</th>\n      <th>Vict Age</th>\n      <th>Vict Sex</th>\n      <th>Vict Descent</th>\n      <th>Weapon Desc</th>\n      <th>Status Desc</th>\n      <th>LOCATION</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>220314085</td>\n      <td>2022-07-22</td>\n      <td>2020-05-12</td>\n      <td>1110</td>\n      <td>Southwest</td>\n      <td>THEFT OF IDENTITY</td>\n      <td>27</td>\n      <td>F</td>\n      <td>B</td>\n      <td>NaN</td>\n      <td>Invest Cont</td>\n      <td>2500 S  SYCAMORE                     AV</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>222013040</td>\n      <td>2022-08-06</td>\n      <td>2020-06-04</td>\n      <td>1620</td>\n      <td>Olympic</td>\n      <td>THEFT OF IDENTITY</td>\n      <td>60</td>\n      <td>M</td>\n      <td>H</td>\n      <td>NaN</td>\n      <td>Invest Cont</td>\n      <td>3300    SAN MARINO                   ST</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>220614831</td>\n      <td>2022-08-18</td>\n      <td>2020-08-17</td>\n      <td>1200</td>\n      <td>Hollywood</td>\n      <td>THEFT OF IDENTITY</td>\n      <td>28</td>\n      <td>M</td>\n      <td>H</td>\n      <td>NaN</td>\n      <td>Invest Cont</td>\n      <td>1900    TRANSIENT</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>231207725</td>\n      <td>2023-02-27</td>\n      <td>2020-01-27</td>\n      <td>0635</td>\n      <td>77th Street</td>\n      <td>THEFT OF IDENTITY</td>\n      <td>37</td>\n      <td>M</td>\n      <td>H</td>\n      <td>NaN</td>\n      <td>Invest Cont</td>\n      <td>6200    4TH                          AV</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>220213256</td>\n      <td>2022-07-14</td>\n      <td>2020-07-14</td>\n      <td>0900</td>\n      <td>Rampart</td>\n      <td>THEFT OF IDENTITY</td>\n      <td>79</td>\n      <td>M</td>\n      <td>B</td>\n      <td>NaN</td>\n      <td>Invest Cont</td>\n      <td>1200 W  7TH                          ST</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"crimes.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T01:14:56.413815Z","iopub.execute_input":"2024-05-29T01:14:56.415144Z","iopub.status.idle":"2024-05-29T01:14:56.507255Z","shell.execute_reply.started":"2024-05-29T01:14:56.415100Z","shell.execute_reply":"2024-05-29T01:14:56.506145Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 185715 entries, 0 to 185714\nData columns (total 12 columns):\n #   Column        Non-Null Count   Dtype         \n---  ------        --------------   -----         \n 0   DR_NO         185715 non-null  int64         \n 1   Date Rptd     185715 non-null  datetime64[ns]\n 2   DATE OCC      185715 non-null  datetime64[ns]\n 3   TIME OCC      185715 non-null  object        \n 4   AREA NAME     185715 non-null  object        \n 5   Crm Cd Desc   185715 non-null  object        \n 6   Vict Age      185715 non-null  int64         \n 7   Vict Sex      185704 non-null  object        \n 8   Vict Descent  185705 non-null  object        \n 9   Weapon Desc   73502 non-null   object        \n 10  Status Desc   185715 non-null  object        \n 11  LOCATION      185715 non-null  object        \ndtypes: datetime64[ns](2), int64(2), object(8)\nmemory usage: 17.0+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Which hour has the highest frequency of crimes? Store as an integer variable called peak_crime_hour.","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\ncrimes['HOUR OCC'] = crimes['TIME OCC'].str[:2].astype(int)\nsns.countplot(data=crimes, x='HOUR OCC')\npeak_crime_hour = 12","metadata":{"execution":{"iopub.status.busy":"2024-05-29T01:19:05.766950Z","iopub.execute_input":"2024-05-29T01:19:05.767428Z","iopub.status.idle":"2024-05-29T01:19:06.257118Z","shell.execute_reply.started":"2024-05-29T01:19:05.767387Z","shell.execute_reply":"2024-05-29T01:19:06.255972Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Which area has the largest frequency of night crimes (crimes committed between 10pm and 3:59am)? Save as a string variable called peak_night_crime_location.","metadata":{}},{"cell_type":"code","source":"peak_night_crime_location = crimes[(crimes['HOUR OCC'] >= 22) | (crimes['HOUR OCC'] < 4)]['AREA NAME'].value_counts().nlargest().index[0]\npeak_night_crime_location","metadata":{"execution":{"iopub.status.busy":"2024-05-29T01:19:47.244384Z","iopub.execute_input":"2024-05-29T01:19:47.244803Z","iopub.status.idle":"2024-05-29T01:19:47.272178Z","shell.execute_reply.started":"2024-05-29T01:19:47.244766Z","shell.execute_reply":"2024-05-29T01:19:47.270976Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"'Central'"},"metadata":{}}]},{"cell_type":"markdown","source":"### Identify the number of crimes committed against victims of different age groups. Save as a pandas Series called victim_ages, with age group labels \"0-17\", \"18-25\", \"26-34\", \"35-44\", \"45-54\", \"55-64\", and \"65+\" as the index and the frequency of crimes as the values.","metadata":{}},{"cell_type":"code","source":"labels = ['0-17', '18-25', '26-34', '35-44', '45-54', '55-64', '65+']\nbins = [0, 18, 26, 35, 45, 55, 65, np.inf ]\ncrimes['Age Bracket'] = pd.cut(crimes['Vict Age'], labels=labels, bins = bins, right=False)\ncrimes['Age Bracket'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T01:25:23.588655Z","iopub.execute_input":"2024-05-29T01:25:23.589086Z","iopub.status.idle":"2024-05-29T01:25:23.609391Z","shell.execute_reply.started":"2024-05-29T01:25:23.589052Z","shell.execute_reply":"2024-05-29T01:25:23.607978Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"Age Bracket\n26-34    47470\n35-44    42157\n45-54    28353\n18-25    28291\n55-64    20169\n65+      14747\n0-17      4528\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"plt.title('Crime Victims by Age group')\nsns.countplot(data=crimes, x='Age Bracket');","metadata":{"execution":{"iopub.status.busy":"2024-05-29T01:29:11.603955Z","iopub.execute_input":"2024-05-29T01:29:11.605034Z","iopub.status.idle":"2024-05-29T01:29:11.888416Z","shell.execute_reply.started":"2024-05-29T01:29:11.604991Z","shell.execute_reply":"2024-05-29T01:29:11.887230Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### ROUGH WORK","metadata":{}},{"cell_type":"code","source":"def convert_int_time_to_str(integer_time):\n    # convert int time to string and pad with leading zeros if needed\n    time_str = str(integer_time).zfill(4)\n#     print(\"time in string is \", time_str)\n    \n    # extract the hours, minutes, and seconds\n    hours = int(time_str[:2])\n    minutes = int(time_str[2:])\n    seconds = 0 # assuming seconds are always zero\n    \n    # create a formatted time string in HH:MM:SS format\n    formatted_time_str = '{:02}:{:02}:{:02}'.format(hours, minutes, seconds)\n    \n    return formatted_time_str\n#example\ninteger_times = [1100, 1340, 1730]\n\nfor integer_time in integer_times:\n    time_str = convert_int_time_to_str(integer_time)\n    print(time_str)","metadata":{"execution":{"iopub.status.busy":"2024-05-26T13:13:27.976213Z","iopub.execute_input":"2024-05-26T13:13:27.977132Z","iopub.status.idle":"2024-05-26T13:13:27.991257Z","shell.execute_reply.started":"2024-05-26T13:13:27.977083Z","shell.execute_reply":"2024-05-26T13:13:27.989683Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"11:00:00\n13:40:00\n17:30:00\n","output_type":"stream"}]},{"cell_type":"code","source":"s = '123'\ns.zfill(5)","metadata":{"execution":{"iopub.status.busy":"2024-05-26T13:13:27.993353Z","iopub.execute_input":"2024-05-26T13:13:27.994225Z","iopub.status.idle":"2024-05-26T13:13:28.013190Z","shell.execute_reply.started":"2024-05-26T13:13:27.994174Z","shell.execute_reply":"2024-05-26T13:13:28.011939Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"'00123'"},"metadata":{}}]},{"cell_type":"code","source":"a = 123\nstr(a).zfill(5)","metadata":{"execution":{"iopub.status.busy":"2024-05-26T13:13:28.015162Z","iopub.execute_input":"2024-05-26T13:13:28.015916Z","iopub.status.idle":"2024-05-26T13:13:28.028729Z","shell.execute_reply.started":"2024-05-26T13:13:28.015842Z","shell.execute_reply":"2024-05-26T13:13:28.027157Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"'00123'"},"metadata":{}}]},{"cell_type":"code","source":"time = 1110\na= str(time).zfill(4)\na[2:]","metadata":{"execution":{"iopub.status.busy":"2024-05-26T13:13:28.030937Z","iopub.execute_input":"2024-05-26T13:13:28.031432Z","iopub.status.idle":"2024-05-26T13:13:28.044499Z","shell.execute_reply.started":"2024-05-26T13:13:28.031386Z","shell.execute_reply":"2024-05-26T13:13:28.042989Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"'10'"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}